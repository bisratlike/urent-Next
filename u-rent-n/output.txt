--- File: app/layout.tsx ---
// import type { Metadata } from "next";

// import "./globals.css";


// import { MantineProvider } from "@mantine/core";
// import { Notifications } from "@mantine/notifications";
// import '@mantine/core/styles.css';
// import '@mantine/notifications/styles.css';
// import 'normalize.css/normalize.css';
// import { CartProvider } from '@/context/CartContext'
// export const metadata: Metadata = {
//   title: "U-rent",
//   description: "",
// };

// export default function RootLayout({ children }: { children: React.ReactNode }) {
//   return (
//     <html lang="en">
//       <body>
//         <MantineProvider >
//         <CartProvider>
//         <Notifications />
//         {children}
        
//         </CartProvider>
         
//         </MantineProvider>
//       </body>
//     </html>
//   );
// }


// app/layout.tsx
import type { Metadata } from "next";
import "./globals.css";
import { MantineProvider } from "@mantine/core";
import { Notifications } from "@mantine/notifications";
import '@mantine/core/styles.css';
import '@mantine/notifications/styles.css';
import { CartProvider } from '@/context/CartContext'

export const metadata: Metadata = {
  title: "U-rent",
  description: "",
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>
        <MantineProvider
          defaultColorScheme="light"
        >
          <CartProvider>
            <Notifications />
            {children}
          </CartProvider>
        </MantineProvider>
      </body>
    </html>
  );
}


--- File: app/page.tsx ---
import React from 'react';
// import {ThreeDCardDemo} from '../components/Card';
import Header from '../components/Header';
import ClientHeader from '../components/ClientHeader';
import ProductsPage from "./products/page"
export default function Home() {
  return (

   <div>
    <ClientHeader
      />
      <ProductsPage/>
    {/* <ThreeDCardDemo
        picture="/codes.jpg"
        price={100}
        productName="Awesome Product"
        description="hola hola hola "
      /> */}
   </div>
  );
}


--- File: app/cart/page.tsx ---
"use client";
import { useCart } from '@/context/CartContext';
import { FiMinus, FiPlus, FiTrash2 } from "react-icons/fi";
import ClientHeader from "@/components/ClientHeader";
import { useState } from "react";

const CartPage = () => {
  const { 
    cartItems, 
    removeFromCart, 
    clearCart, 
    addToCart,
    totalPrice 
  } = useCart();

  const [error, setError] = useState("");

  const updateQuantity = (id: number, change: number) => {
    const item = cartItems.find(item => item.id === id);
    if (!item) return;

    if (item.quantity + change < 0) {
      setError("Quantity cannot be negative");
      return;
    }
    
    if (change > 0) {
      addToCart(item);
    } else {
      if (item.quantity === 1) {
        removeFromCart(id);
      } else {
        addToCart({ ...item, quantity: -1 });
      }
    }
    setError("");
  };

  return (
    <div className="min-h-screen bg-gray-100 py-8 px-4 sm:px-6 lg:px-8">
      <ClientHeader />
      <div className="max-w-7xl mx-auto">
        <h1 className="text-3xl font-bold text-gray-900 mb-8">Shopping Cart</h1>
        
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
            <span className="block sm:inline">{error}</span>
          </div>
        )}

        {cartItems.length === 0 ? (
          <div className="text-center py-12">
            <p className="text-xl text-gray-500">Your cart is empty</p>
          </div>
        ) : (
          <div className="bg-white rounded-lg shadow overflow-hidden">
            <div className="divide-y divide-gray-200">
              {cartItems.map((item) => (
                <div key={item.id} className="p-6 flex flex-col sm:flex-row items-start gap-6 transition-all hover:bg-gray-50">
                  <div className="w-full sm:w-32 h-32 flex-shrink-0">
                    <img
                      src={item.picture}
                      alt={item.name}
                      className="w-full h-full object-cover rounded-lg"
                      onError={(e) => {
                        const target = e.target as HTMLImageElement;
                        target.src = "https://images.unsplash.com/photo-1594322436404-5a0526db4d13";
                      }}
                    />
                  </div>

                  <div className="flex-1 w-full">
                    <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
                      <div className="flex-1">
                        <h3 className="text-lg font-medium text-gray-900">{item.name}</h3>
                        <p className="mt-1 text-sm text-gray-500">${item.price.toFixed(2)}</p>
                      </div>

                      <div className="w-full md:w-auto flex items-center justify-between gap-4">
                        <div className="flex items-center border rounded-lg">
                          <button
                            onClick={() => updateQuantity(item.id, -1)}
                            className="p-2 hover:bg-gray-100 transition-colors"
                            aria-label="Decrease quantity"
                          >
                            <FiMinus className="w-4 h-4" />
                          </button>
                          <span className="px-4 py-2 text-center min-w-[3rem]">{item.quantity}</span>
                          <button
                            onClick={() => updateQuantity(item.id, 1)}
                            className="p-2 hover:bg-gray-100 transition-colors"
                            aria-label="Increase quantity"
                          >
                            <FiPlus className="w-4 h-4" />
                          </button>
                        </div>

                        <div className="flex items-center gap-2">
                          <button
                            onClick={() => removeFromCart(item.id)}
                            className="p-2 text-red-500 hover:text-red-700 transition-colors"
                            aria-label="Remove item"
                          >
                            <FiTrash2 className="w-5 h-5" />
                          </button>
                          <div className="text-right min-w-[100px]">
                            <p className="text-lg font-medium text-gray-900">
                              ${(item.price * item.quantity).toFixed(2)}
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>

            <div className="bg-gray-50 p-6">
              <div className="flex justify-between items-center">
                <span className="text-lg font-medium text-gray-900">Total</span>
                <span className="text-2xl font-bold text-gray-900">${totalPrice.toFixed(2)}</span>
              </div>

              <div className="mt-6 flex justify-end gap-4">
                <button
                  onClick={clearCart}
                  className="px-6 py-2 bg-gray-200 hover:bg-gray-300 text-gray-800 rounded-lg transition-colors"
                >
                  Clear Cart
                </button>
                <button
                  className="px-6 py-2 bg-purple-600 hover:bg-purple-700 text-white font-medium rounded-lg transition-colors"
                  onClick={() => alert("Proceeding to checkout")}
                >
                  Checkout
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default CartPage;

--- File: app/products/page.tsx ---
// File: app/products/page.tsx
import React from 'react';
import { getProducts } from '@/lib/actions/product';
import { Product } from '@/lib/actions/types';
import ProductsList from './components/ProductList';

const ProductsPage = async () => {
  const rawProducts = await getProducts();

  const products: Product[] = rawProducts.map((product) => ({
    id: product.id,
    name: product.name || "",
    description: product.description || "",
    price: Number(product.price) || 0,
    picture: product.picture || "/codes.jpg",
    createdAt: product.createdAt || new Date(),
    updatedAt: product.updatedAt || new Date(),
  }));

  return <ProductsList products={products} />;
};

export default ProductsPage;

--- File: app/products/post/page.tsx ---
"use client";
import React from 'react';
import { useForm } from '@mantine/form';
import { TextInput, Textarea, NumberInput, Button, Container, Title, FileInput } from '@mantine/core';
import { useState } from 'react';
import { uploadImage } from '@/lib/actions/ImageHandler';
import {createProduct} from '@/lib/actions/product';
// import { Product } from '@/lib/actions/types';
const AddProductPage = () => {
    const [image, setImage] = useState<File | null>(null);
    const form = useForm({
        initialValues: {
            name: '',
            description: '',
            price: 0,
        },
    });
// app/products/post/page.tsx
const handleSubmit = async (values: typeof form.values) => {
    if (!image) return;
  
    try {
      
      const imageUrl = await uploadImage(image);
      
      const productData = {
        ...values,
        picture: imageUrl || "/codes.jpg",
        createdAt: new Date(),
        updatedAt: new Date(),
      };
  
      await createProduct(productData);
    } catch (error) {
      console.error('Error:', error);
    }
  };

    return (
        <Container className="mt-10 p-6 bg-white rounded-lg shadow-md">
            <Title order={2} className="mb-6 text-center">
                Add New Product
            </Title>
            <form onSubmit={form.onSubmit(handleSubmit)}>
                <TextInput
                    label="Product Name"
                    placeholder="Enter product name"
                    {...form.getInputProps('name')}
                    className="mb-4"
                />
                <Textarea
                    label="Description"
                    placeholder="Enter product description"
                    {...form.getInputProps('description')}
                    className="mb-4"
                />
                <NumberInput
  label="Price"
  placeholder="Enter product price"
  {...form.getInputProps('price')}
  className="mb-4"
  min={0}
  step={0.01}
/>
                <FileInput
                    label="Product Image"
                    placeholder="Upload product image"
                    onChange={setImage}
                    className="mb-4"
                />
                <Button type="submit" className="w-full bg-blue-500 hover:bg-blue-600">
                    Add Product
                </Button>
            </form>
        </Container>
    );
};

export default AddProductPage;

--- File: app/products/components/ProductList.tsx ---
"use client";

import React from 'react';
import { ThreeDCardDemo } from '@/components/Card';
import { useCart } from '@/context/CartContext';
import { Product } from '@/lib/actions/types';

interface ProductsListProps {
  products: Product[];
}

const ProductsList = ({ products }: ProductsListProps) => {
  const { addToCart } = useCart();

  return (
    <div className="products-page p-4 md:p-8">
      <div className="products-grid grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 max-w-7xl mx-auto">
        {products.map((product) => (
          <div key={product.id} className="w-full">
            <ThreeDCardDemo
              picture={product.picture || "/codes.jpg"}
              price={product.price || 0}
              productName={product.name || "Unnamed Product"}
              description={product.description || "No description available"}
              onAddToCart={() => addToCart({
                id: product.id,
                name: product.name || "Unnamed Product",
                price: Number(product.price) || 0,
                picture: product.picture || "/default-image.jpg",
                quantity: 1
              })}
            />
          </div>
        ))}
      </div>
    </div>
  );
};

export default ProductsList;

--- File: components/Card.tsx ---
"use client";

import Image from "next/image";
import React from "react";
import { CardBody, CardContainer, CardItem } from "./ui/3d-card";
import Link from "next/link";

interface ThreeDCardDemoProps {
  picture: string;
  price: number;
  productName: string;
  description: string;
  onAddToCart?: () => void;
}



export function ThreeDCardDemo({ picture, price, productName, description, onAddToCart }: ThreeDCardDemoProps) {
  return (
    <CardContainer className="inter-var mb-5 w-full max-w-[350px]">
         <CardContainer className="inter-var mb-5">
      <CardBody className="bg-gray-50 relative group/card dark:hover:shadow-2xl dark:hover:shadow-emerald-500/[0.1] dark:bg-black dark:border-white/[0.2] border-black/[0.1] w-full h-auto rounded-xl p-6 border ">
        <img
          src={picture}
          alt={productName}
          width={500}
          height={300}
          className="rounded-xl w-full object-cover"
        />
        <CardItem translateZ="50" className="text-xl font-bold text-neutral-600 dark:text-white mt-4">
          {productName}
        </CardItem>
        <CardItem as="p" translateZ="60" className="text-neutral-500 text-sm max-w-sm mt-2 dark:text-neutral-300">
          {description}
        </CardItem>
        <CardItem as="p" translateZ="60" className="text-neutral-500 text-sm max-w-sm mt-2 dark:text-neutral-300">
          {price}
        </CardItem>
        <CardItem 
          as="button" 
          translateZ="70" 
          className="..."
          onClick={onAddToCart}
        >
          Add to Cart
        </CardItem>
      </CardBody>
    </CardContainer>
    </CardContainer>
  );
}

--- File: components/Header.tsx ---
// components/Header.tsx
import React from 'react';
import Link from 'next/link';
import { Text, Group, Anchor } from '@mantine/core';

interface HeaderProps {
  title: string;
  navLinks?: { href: string; label: string }[];
  totalPrice?: number;
}

const Header: React.FC<HeaderProps> = ({ title, navLinks, totalPrice }) => {
  return (
    <div
      style={{
        backgroundColor: '#6c5ce7',
        padding: '1rem',
        width: '100%',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
      }}
    >
      <Text c="white" fw={700} size="xl">
        {title}
      </Text>

      <Group spacing="md">
        {navLinks?.map((link) => (
          <Anchor
            key={link.href}
            component={Link}
            href={link.href}
            c="white"
            fw={500}
            style={{ textDecoration: 'none' }}
          >
            {link.label}
          </Anchor>
        ))}
        {totalPrice !== undefined && (
          <Text c="white" fw={500}>
            Total: ${totalPrice.toFixed(2)}
          </Text>
        )}
      </Group>
    </div>
  );
};

export default Header;

--- File: components/ClientHeader.tsx ---
// components/ClientHeader.tsx
"use client";

import { useCart } from '@/context/CartContext';
import Header from './Header';

const ClientHeader = () => {
  const { totalItems, totalPrice } = useCart();
  
  return (
    <Header
      title="U-rent"
      navLinks={[
        { href: '/products', label: 'Product' },
        { href: '/cart', label: `My Cart (${totalItems})` },
      ]}
      totalPrice={totalPrice}
    />
  );
};

export default ClientHeader;

--- File: components/ui/3d-card.tsx ---
"use client";

import { cn } from "@/lib/utils";
import Image from "next/image";
import React, {
  createContext,
  useState,
  useContext,
  useRef,
  useEffect,
} from "react";

const MouseEnterContext = createContext<
  [boolean, React.Dispatch<React.SetStateAction<boolean>>] | undefined
>(undefined);

export const CardContainer = ({
  children,
  className,
  containerClassName,
}: {
  children?: React.ReactNode;
  className?: string;
  containerClassName?: string;
}) => {
  const containerRef = useRef<HTMLDivElement>(null);
  const [isMouseEntered, setIsMouseEntered] = useState(false);

  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {
    if (!containerRef.current) return;
    const { left, top, width, height } =
      containerRef.current.getBoundingClientRect();
    const x = (e.clientX - left - width / 2) / 25;
    const y = (e.clientY - top - height / 2) / 25;
    containerRef.current.style.transform = `rotateY(${x}deg) rotateX(${y}deg)`;
  };

  const handleMouseEnter = (e: React.MouseEvent<HTMLDivElement>) => {
    setIsMouseEntered(true);
    if (!containerRef.current) return;
  };

  const handleMouseLeave = (e: React.MouseEvent<HTMLDivElement>) => {
    if (!containerRef.current) return;
    setIsMouseEntered(false);
    containerRef.current.style.transform = `rotateY(0deg) rotateX(0deg)`;
  };
  return (
    <MouseEnterContext.Provider value={[isMouseEntered, setIsMouseEntered]}>
      <div
        className={cn(
          "py-20 flex items-center justify-center",
          containerClassName
        )}
        style={{
          perspective: "1000px",
        }}
      >
        <div
          ref={containerRef}
          onMouseEnter={handleMouseEnter}
          onMouseMove={handleMouseMove}
          onMouseLeave={handleMouseLeave}
          className={cn(
            "flex items-center justify-center relative transition-all duration-200 ease-linear",
            className
          )}
          style={{
            transformStyle: "preserve-3d",
          }}
        >
          {children}
        </div>
      </div>
    </MouseEnterContext.Provider>
  );
};

export const CardBody = ({
  children,
  className,
}: {
  children: React.ReactNode;
  className?: string;
}) => {
  return (
    <div
      className={cn(
        "h-96 w-96 [transform-style:preserve-3d]  [&>*]:[transform-style:preserve-3d]",
        className
      )}
    >
      {children}
    </div>
  );
};

export const CardItem = ({
  as: Tag = "div",
  children,
  className,
  translateX = 0,
  translateY = 0,
  translateZ = 0,
  rotateX = 0,
  rotateY = 0,
  rotateZ = 0,
  ...rest
}: {
  as?: React.ElementType;
  children: React.ReactNode;
  className?: string;
  translateX?: number | string;
  translateY?: number | string;
  translateZ?: number | string;
  rotateX?: number | string;
  rotateY?: number | string;
  rotateZ?: number | string;
  [key: string]: any;
}) => {
  const ref = useRef<HTMLDivElement>(null);
  const [isMouseEntered] = useMouseEnter();

  useEffect(() => {
    handleAnimations();
  }, [isMouseEntered]);

  const handleAnimations = () => {
    if (!ref.current) return;
    if (isMouseEntered) {
      ref.current.style.transform = `translateX(${translateX}px) translateY(${translateY}px) translateZ(${translateZ}px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) rotateZ(${rotateZ}deg)`;
    } else {
      ref.current.style.transform = `translateX(0px) translateY(0px) translateZ(0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg)`;
    }
  };

  return (
    <Tag
      ref={ref}
      className={cn("w-fit transition duration-200 ease-linear", className)}
      {...rest}
    >
      {children}
    </Tag>
  );
};

// Create a hook to use the context
export const useMouseEnter = () => {
  const context = useContext(MouseEnterContext);
  if (context === undefined) {
    throw new Error("useMouseEnter must be used within a MouseEnterProvider");
  }
  return context;
};


--- File: drizzle/db.ts ---
import { drizzle } from "drizzle-orm/postgres-js";
import postgres from "postgres";
import * as schema from "./schema";
const client = postgres(process.env.DATABASE_URL!);
export const db = drizzle(client, { schema });

--- File: drizzle/schema.ts ---
import { pgTable, serial, text, numeric,timestamp } from "drizzle-orm/pg-core";

export const products = pgTable("products", {
    id: serial("id").primaryKey(),
    name: text("name"),
    description: text("description"),
    price: numeric("price"),
    picture: text("picture"),
    createdAt: timestamp("created_at").defaultNow(),
    updatedAt: timestamp("updated_at").defaultNow()
});

--- File: context/CartContext.tsx ---
// context/CartContext.tsx
"use client";
import React, { createContext, useContext, useReducer } from 'react';

type CartItem = {
  id: number;
  name: string;
  price: number;
  picture: string;
  quantity: number;
};

type CartState = {
  items: CartItem[];
  totalPrice: number;
};

type CartAction =
  | { type: 'ADD_ITEM'; payload: CartItem }
  | { type: 'REMOVE_ITEM'; payload: number }
  | { type: 'CLEAR_CART' };

const CartContext = createContext<{
  cartItems: CartItem[];
  totalPrice: number;
  addToCart: (item: CartItem) => void;
  removeFromCart: (id: number) => void;
  clearCart: () => void;
}>({
  cartItems: [],
  totalPrice: 0,
  addToCart: () => {},
  removeFromCart: () => {},
  clearCart: () => {},
});

const cartReducer = (state: CartState, action: CartAction): CartState => {
  switch (action.type) {
    case 'ADD_ITEM': {
      const existingItem = state.items.find(item => item.id === action.payload.id);
      if (existingItem) {
        return {
          ...state,
          items: state.items.map(item =>
            item.id === action.payload.id
              ? { ...item, quantity: item.quantity + action.payload.quantity }
              : item
          ),
          totalPrice: state.totalPrice + (action.payload.price * action.payload.quantity),
        };
      }
      return {
        ...state,
        items: [...state.items, action.payload],
        totalPrice: state.totalPrice + (action.payload.price * action.payload.quantity),
      };
    }
    case 'REMOVE_ITEM': {
        const remainingItems = state.items.filter(item => item.id !== action.payload);
        
        const newTotal = remainingItems.reduce(
          (sum, item) => sum + Number((item.price * item.quantity).toFixed(2)),
          0
        );
      
        return {
          items: remainingItems,
          totalPrice: Number(newTotal.toFixed(2)),
        };
      }
    case 'CLEAR_CART':
      return { items: [], totalPrice: 0 };
    default:
      return state;
  }
};

export const CartProvider = ({ children }: { children: React.ReactNode }) => {
  const [state, dispatch] = useReducer(cartReducer, { items: [], totalPrice: 0 });

  return (
    <CartContext.Provider
      value={{
        cartItems: state.items,
        totalPrice: state.totalPrice,
        addToCart: (item) => dispatch({ type: 'ADD_ITEM', payload: item }),
        removeFromCart: (id) => dispatch({ type: 'REMOVE_ITEM', payload: id }),
        clearCart: () => dispatch({ type: 'CLEAR_CART' }),
      }}
    >
      {children}
    </CartContext.Provider>
  );
};

export const useCart = () => useContext(CartContext);

--- File: lib/utils.ts ---
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


--- File: lib/actions/ImageHandler.ts ---
"use server";
import { v2 as cloudinary } from "cloudinary";

// Configure with environment variables
cloudinary.config({
  cloud_name: process.env.cloud_name,
  api_key: process.env.Api_key,
  api_secret: process.env.Api_secret,
});

export async function uploadImage(file: File) {
  try {
    // Convert file to buffer
    const arrayBuffer = await file.arrayBuffer();
    const buffer = Buffer.from(arrayBuffer);

    // Direct upload without base64 conversion
    const result = await cloudinary.uploader.upload(
      `data:${file.type};base64,${buffer.toString("base64")}`,
      {
        folder: "nextjs_uploads",
        resource_type: "auto",
      }
    );

    return result.secure_url;
  } catch (error) {
    console.error("Upload failed:", error);
    throw new Error("Image upload failed");
  }
}

--- File: lib/actions/types.ts ---
export interface Product {
    id: number;
    name: string | null;
    description: string | null;
    price: number | 0;
    picture: string | null;
    createdAt: Date | null;
    updatedAt: Date | null;
  }

--- File: lib/actions/product.ts ---
"use server";
import { db } from "@/drizzle/db";
import { products } from "@/drizzle/schema";
import { eq, asc } from "drizzle-orm";
import { Product } from './types';





export async function createProduct(productData: Omit<Product, 'id'>) {
  try {
      console.log("Product Data:", productData);

      const [newProduct] = await db.insert(products).values({
          name: productData.name,
          description: productData.description,
          price: productData.price,
          picture: productData.picture,
      }).returning();

      console.log("New Product:", newProduct);
      return newProduct;
  } catch (error) {
      console.error("Error creating product:", error);
      throw new Error("Failed to create product");
  }
}

export async function getProducts() {
  try {
      const productList = await db.select().from(products).orderBy(asc(products.name));
      return productList;
  } catch (error) {
      console.error("Error fetching products:", error);
      throw new Error("Failed to fetch products");
  }
}

export async function getProductById(productId: number) {
    try {
        const [product] = await db.select().from(products).where(eq(products.id, productId));
        return product;
    } catch (error) {
        console.error("Error fetching product:", error);
        throw new Error("Failed to fetch product");
    }
  }

