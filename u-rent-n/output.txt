--- File: app/layout.tsx ---
import type { Metadata } from "next";

import "./globals.css";


import { MantineProvider } from "@mantine/core";
import { Notifications } from "@mantine/notifications";
import '@mantine/core/styles.css';
import '@mantine/notifications/styles.css';
import 'normalize.css/normalize.css';
import { CartProvider } from '@/context/CartContext'
export const metadata: Metadata = {
  title: "U-rent",
  description: "",
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>
        <MantineProvider >
        <CartProvider>
        <Notifications />
        {children}
        
        </CartProvider>
         
        </MantineProvider>
      </body>
    </html>
  );
}



--- File: app/page.tsx ---
import React from 'react';
// import {ThreeDCardDemo} from '../components/Card';
import Header from '../components/Header';
import ClientHeader from '../components/ClientHeader';
import ProductsPage from "./products/page"
export default function Home() {
  return (

   <div>
    <ClientHeader
      />
      <ProductsPage/>
    {/* <ThreeDCardDemo
        picture="/codes.jpg"
        price={100}
        productName="Awesome Product"
        description="hola hola hola "
      /> */}
   </div>
  );
}


--- File: app/cart/page.tsx ---

"use client";
import { useCart } from '@/context/CartContext';
import { Group, Paper, Text, Button, Title, Stack, Image } from '@mantine/core';
import ClientHeader from "@/components/ClientHeader";

export default function CartPage() {
  const { cartItems, removeFromCart, clearCart, totalPrice } = useCart();

  return (

    <div className="p-6">
      <ClientHeader/>
      <Title order={1} className="mb-6">Shopping Cart</Title>
      
      {cartItems.length === 0 ? (
        <Text>Your cart is empty</Text>
      ) : (
        <Stack spacing="md">
          {cartItems.map((item) => (
            <Paper key={item.id} p="md" shadow="sm">
              <Group position="apart">
                <Group>
                  <Image
                    src={item.picture}
                    alt={item.name}
                    width={80}
                    height={60}
                    radius="sm"
                  />
                  <div>
                    <Text fw={500}>{item.name}</Text>
                    <Text>${item.price.toFixed(2)} x {item.quantity}</Text>
                  </div>
                </Group>
                <Group>
                  <Text>${(item.price * item.quantity).toFixed(2)}</Text>
                  <Button
                    variant="outline"
                    color="red"
                    size="sm"
                    onClick={() => removeFromCart(item.id)}
                  >
                    Remove
                  </Button>
                </Group>
              </Group>
            </Paper>
          ))}

          <Group position="apart" className="mt-6">
            <Title order={3}>Total: ${totalPrice.toFixed(2)}</Title>
            <Group>
              <Button variant="outline" onClick={clearCart}>
                Clear Cart
              </Button>
            </Group>
          </Group>
        </Stack>
      )}
    </div>
  );
}

--- File: app/products/page.tsx ---
// File: app/products/page.tsx
import React from 'react';
import { getProducts } from '@/lib/actions/product';
import { Product } from '@/lib/actions/types';
import ProductsList from './components/ProductList';

const ProductsPage = async () => {
  const rawProducts = await getProducts();

  const products: Product[] = rawProducts.map((product) => ({
    id: product.id,
    name: product.name || "",
    description: product.description || "",
    price: Number(product.price) || 0,
    picture: product.picture || "/codes.jpg",
    createdAt: product.createdAt || new Date(),
    updatedAt: product.updatedAt || new Date(),
  }));

  return <ProductsList products={products} />;
};

export default ProductsPage;

--- File: app/products/post/page.tsx ---
"use client";
import React from 'react';
import { useForm } from '@mantine/form';
import { TextInput, Textarea, NumberInput, Button, Container, Title, FileInput } from '@mantine/core';
import { useState } from 'react';
import { uploadImage } from '@/lib/actions/ImageHandler';
import {createProduct} from '@/lib/actions/product';
// import { Product } from '@/lib/actions/types';
const AddProductPage = () => {
    const [image, setImage] = useState<File | null>(null);
    const form = useForm({
        initialValues: {
            name: '',
            description: '',
            price: 0,
        },
    });
// app/products/post/page.tsx
const handleSubmit = async (values: typeof form.values) => {
    if (!image) return;
  
    try {
      
      const imageUrl = await uploadImage(image);
      
      const productData = {
        ...values,
        picture: imageUrl || "/codes.jpg",
        createdAt: new Date(),
        updatedAt: new Date(),
      };
  
      await createProduct(productData);
    } catch (error) {
      console.error('Error:', error);
    }
  };

    return (
        <Container className="mt-10 p-6 bg-white rounded-lg shadow-md">
            <Title order={2} className="mb-6 text-center">
                Add New Product
            </Title>
            <form onSubmit={form.onSubmit(handleSubmit)}>
                <TextInput
                    label="Product Name"
                    placeholder="Enter product name"
                    {...form.getInputProps('name')}
                    className="mb-4"
                />
                <Textarea
                    label="Description"
                    placeholder="Enter product description"
                    {...form.getInputProps('description')}
                    className="mb-4"
                />
                <NumberInput
  label="Price"
  placeholder="Enter product price"
  {...form.getInputProps('price')}
  className="mb-4"
  min={0}
  step={0.01}
/>
                <FileInput
                    label="Product Image"
                    placeholder="Upload product image"
                    onChange={setImage}
                    className="mb-4"
                />
                <Button type="submit" className="w-full bg-blue-500 hover:bg-blue-600">
                    Add Product
                </Button>
            </form>
        </Container>
    );
};

export default AddProductPage;

--- File: app/products/components/ProductList.tsx ---

"use client";

import React from 'react';
import { ThreeDCardDemo } from '@/components/Card';
import { useCart } from '@/context/CartContext';
import { Product } from '@/lib/actions/types';

interface ProductsListProps {
  products: Product[];
}

const ProductsList = ({ products }: ProductsListProps) => {
  const { addToCart } = useCart();

  return (
    <div className="products-page">
      <div className="products-grid grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {products.map((product) => (
          <div key={product.id} className="product-card">
            <ThreeDCardDemo
              picture={product.picture}
              price={product.price}
              productName={product.name}
              description={product.description}
              onAddToCart={() => addToCart({
                id: product.id,
                name: product.name||"",
                price: product.price,
                picture: product.picture||"/codes.jpg",
                
              })}
            />
          </div>
        ))}
      </div>
    </div>
  );
};

export default ProductsList;

--- File: components/Card.tsx ---
"use client";

import Image from "next/image";
import React from "react";
import { CardBody, CardContainer, CardItem } from "./ui/3d-card";
import Link from "next/link";

interface ThreeDCardDemoProps {
  picture: string;
  price: number;
  productName: string;
  description: string;
  onAddToCart?: () => void;
}

export function ThreeDCardDemo({ picture, price, productName, description,onAddToCart }: ThreeDCardDemoProps) {
  return (
    <CardContainer className="inter-var mb-5">
      <CardBody className="bg-gray-50 relative group/card dark:hover:shadow-2xl dark:hover:shadow-emerald-500/[0.1] dark:bg-black dark:border-white/[0.2] border-black/[0.1] w-full h-auto rounded-xl p-6 border ">
        <img
          src={picture}
          alt={productName}
          width={500}
          height={300}
          className="rounded-xl w-full object-cover"
        />
        <CardItem translateZ="50" className="text-xl font-bold text-neutral-600 dark:text-white mt-4">
          {productName}
        </CardItem>
        <CardItem as="p" translateZ="60" className="text-neutral-500 text-sm max-w-sm mt-2 dark:text-neutral-300">
          {description}
        </CardItem>
        <CardItem as="p" translateZ="60" className="text-neutral-500 text-sm max-w-sm mt-2 dark:text-neutral-300">
          {price}
        </CardItem>
        <CardItem 
          as="button" 
          translateZ="70" 
          className="..."
          onClick={onAddToCart}
        >
          Add to Cart
        </CardItem>
      </CardBody>
    </CardContainer>
  );
}


--- File: components/Header.tsx ---
// components/Header.tsx
import React from 'react';
import Link from 'next/link';
import { Text, Group, Anchor } from '@mantine/core';

interface HeaderProps {
  title: string;
  navLinks?: { href: string; label: string }[];
  totalPrice?: number;
}

const Header: React.FC<HeaderProps> = ({ title, navLinks, totalPrice }) => {
  return (
    <div
      style={{
        backgroundColor: '#6c5ce7',
        padding: '1rem',
        width: '100%',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
      }}
    >
      <Text c="white" fw={700} size="xl">
        {title}
      </Text>

      <Group spacing="md">
        {navLinks?.map((link) => (
          <Anchor
            key={link.href}
            component={Link}
            href={link.href}
            c="white"
            fw={500}
            style={{ textDecoration: 'none' }}
          >
            {link.label}
          </Anchor>
        ))}
        {totalPrice !== undefined && (
          <Text c="white" fw={500}>
            Total: ${totalPrice.toFixed(2)}
          </Text>
        )}
      </Group>
    </div>
  );
};

export default Header;

--- File: components/ClientHeader.tsx ---
// components/ClientHeader.tsx
"use client";

import { useCart } from '@/context/CartContext';
import Header from './Header';

const ClientHeader = () => {
  const { totalItems, totalPrice } = useCart();
  
  return (
    <Header
      title="U-rent"
      navLinks={[
        { href: '/products', label: 'Product' },
        { href: '/cart', label: `My Cart (${totalItems})` },
      ]}
      totalPrice={totalPrice}
    />
  );
};

export default ClientHeader;

--- File: components/ui/3d-card.tsx ---
"use client";

import { cn } from "@/lib/utils";
import Image from "next/image";
import React, {
  createContext,
  useState,
  useContext,
  useRef,
  useEffect,
} from "react";

const MouseEnterContext = createContext<
  [boolean, React.Dispatch<React.SetStateAction<boolean>>] | undefined
>(undefined);

export const CardContainer = ({
  children,
  className,
  containerClassName,
}: {
  children?: React.ReactNode;
  className?: string;
  containerClassName?: string;
}) => {
  const containerRef = useRef<HTMLDivElement>(null);
  const [isMouseEntered, setIsMouseEntered] = useState(false);

  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {
    if (!containerRef.current) return;
    const { left, top, width, height } =
      containerRef.current.getBoundingClientRect();
    const x = (e.clientX - left - width / 2) / 25;
    const y = (e.clientY - top - height / 2) / 25;
    containerRef.current.style.transform = `rotateY(${x}deg) rotateX(${y}deg)`;
  };

  const handleMouseEnter = (e: React.MouseEvent<HTMLDivElement>) => {
    setIsMouseEntered(true);
    if (!containerRef.current) return;
  };

  const handleMouseLeave = (e: React.MouseEvent<HTMLDivElement>) => {
    if (!containerRef.current) return;
    setIsMouseEntered(false);
    containerRef.current.style.transform = `rotateY(0deg) rotateX(0deg)`;
  };
  return (
    <MouseEnterContext.Provider value={[isMouseEntered, setIsMouseEntered]}>
      <div
        className={cn(
          "py-20 flex items-center justify-center",
          containerClassName
        )}
        style={{
          perspective: "1000px",
        }}
      >
        <div
          ref={containerRef}
          onMouseEnter={handleMouseEnter}
          onMouseMove={handleMouseMove}
          onMouseLeave={handleMouseLeave}
          className={cn(
            "flex items-center justify-center relative transition-all duration-200 ease-linear",
            className
          )}
          style={{
            transformStyle: "preserve-3d",
          }}
        >
          {children}
        </div>
      </div>
    </MouseEnterContext.Provider>
  );
};

export const CardBody = ({
  children,
  className,
}: {
  children: React.ReactNode;
  className?: string;
}) => {
  return (
    <div
      className={cn(
        "h-96 w-96 [transform-style:preserve-3d]  [&>*]:[transform-style:preserve-3d]",
        className
      )}
    >
      {children}
    </div>
  );
};

export const CardItem = ({
  as: Tag = "div",
  children,
  className,
  translateX = 0,
  translateY = 0,
  translateZ = 0,
  rotateX = 0,
  rotateY = 0,
  rotateZ = 0,
  ...rest
}: {
  as?: React.ElementType;
  children: React.ReactNode;
  className?: string;
  translateX?: number | string;
  translateY?: number | string;
  translateZ?: number | string;
  rotateX?: number | string;
  rotateY?: number | string;
  rotateZ?: number | string;
  [key: string]: any;
}) => {
  const ref = useRef<HTMLDivElement>(null);
  const [isMouseEntered] = useMouseEnter();

  useEffect(() => {
    handleAnimations();
  }, [isMouseEntered]);

  const handleAnimations = () => {
    if (!ref.current) return;
    if (isMouseEntered) {
      ref.current.style.transform = `translateX(${translateX}px) translateY(${translateY}px) translateZ(${translateZ}px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) rotateZ(${rotateZ}deg)`;
    } else {
      ref.current.style.transform = `translateX(0px) translateY(0px) translateZ(0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg)`;
    }
  };

  return (
    <Tag
      ref={ref}
      className={cn("w-fit transition duration-200 ease-linear", className)}
      {...rest}
    >
      {children}
    </Tag>
  );
};

// Create a hook to use the context
export const useMouseEnter = () => {
  const context = useContext(MouseEnterContext);
  if (context === undefined) {
    throw new Error("useMouseEnter must be used within a MouseEnterProvider");
  }
  return context;
};


--- File: drizzle/db.ts ---
import { drizzle } from "drizzle-orm/postgres-js";
import postgres from "postgres";
import * as schema from "./schema";
const client = postgres(process.env.DATABASE_URL!);
export const db = drizzle(client, { schema });

--- File: drizzle/schema.ts ---
import { pgTable, serial, text, numeric,timestamp } from "drizzle-orm/pg-core";

export const products = pgTable("products", {
    id: serial("id").primaryKey(),
    name: text("name"),
    description: text("description"),
    price: numeric("price"),
    picture: text("picture"),
    createdAt: timestamp("created_at").defaultNow(),
    updatedAt: timestamp("updated_at").defaultNow()
});

